const { Client, GatewayIntentBits, ButtonBuilder, ButtonStyle, ActionRowBuilder, MessageFlags } = require('discord.js');
const { DC_TOKEN } = require('./config.js');
const { createDiscountCode } = require('./shopier.js');
const express = require('express');
const db = require('./db.js'); // VeritabanÄ± iÅŸlemlerini db.js'den al
const app = express();

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

client.on('ready', () => {
  console.log(`[${new Date().toLocaleString()}] Bot hazÄ±r! Bot ID: ${client.user.id}`);
});

client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  if (message.content === '!cekilis') {
    console.log(`[${new Date().toLocaleString()}] KullanÄ±cÄ± ${message.author.tag} (${message.author.id}) !cekilis komutunu kullandÄ±.`);

    const button = new ButtonBuilder()
      .setCustomId('cekilis')
      .setLabel('ÅžansÄ±nÄ± Dene!')
      .setStyle(ButtonStyle.Primary);

    const row = new ActionRowBuilder().addComponents(button);

    await message.reply({
      content: 'AÅŸaÄŸÄ±daki butona basarak indirim kodunu Ã§ekebilirsin!',
      components: [row],
    });
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;

  if (interaction.customId === 'cekilis') {
    console.log(`[${new Date().toLocaleString()}] KullanÄ±cÄ± ${interaction.user.tag} (${interaction.user.id}) Ã§ekiliÅŸ butonuna bastÄ±.`);

    // KullanÄ±cÄ±nÄ±n daha Ã¶nce katÄ±lÄ±p katÄ±lmadÄ±ÄŸÄ±nÄ± kontrol et (veritabanÄ±ndan)
    const userId = interaction.user.id;
    const userExists = await db.checkUser(userId);
    console.log(`[${new Date().toLocaleString()}] userExists kontrol sonucu:`, userExists);

    if (userExists) {
      await interaction.reply({
        content: `Zaten Ã§ekiliÅŸe katÄ±ldÄ±n! Her kullanÄ±cÄ± yalnÄ±zca bir kez katÄ±labilir.\nÄ°ÅŸte daha Ã¶nce aldÄ±ÄŸÄ±n indirim kodu: **${userExists.code}** ðŸŽ‰\nÄ°ndirim MiktarÄ±: **${userExists.amountOff} TL** (%${Math.round((userExists.amountOff / 2850) * 100)})\nSon Kullanma Tarihi: **${userExists.expiresAt}**`,
        flags: MessageFlags.Ephemeral,
      });
      return; // KullanÄ±cÄ± zaten katÄ±ldÄ±ysa iÅŸlemi durdur
    }

    await interaction.reply({
      content: 'Ã‡ekiliÅŸe katÄ±ldÄ±n! Ä°ndirim kodu oluÅŸturuluyor...',
      flags: MessageFlags.Ephemeral,
    });

    console.log(`[${new Date().toLocaleString()}] KullanÄ±cÄ± ${interaction.user.tag} (${interaction.user.id}) Ã§ekiliÅŸe eklendi.`);

    console.log(`[${new Date().toLocaleString()}] Ä°ndirim kodu oluÅŸturuluyor... KullanÄ±cÄ±: ${interaction.user.tag} (${interaction.user.id})`);

    try {
      const discountCode = await createDiscountCode();
      console.log(`[${new Date().toLocaleString()}] Kod: ${discountCode.code}, Ä°ndirim MiktarÄ±: ${discountCode.amountOff} TL (%${Math.round((discountCode.amountOff / 2850) * 100)}), Minimum Sepet: ${discountCode.amountMinimum} TL, Son Kullanma: ${discountCode.expiresAt}`);
      console.log(`[${new Date().toLocaleString()}] Ä°ndirim kodu baÅŸarÄ±yla oluÅŸturuldu! Shopier YanÄ±tÄ±:`, discountCode);

      // KullanÄ±cÄ±yÄ± ve indirim kodunu veritabanÄ±na ekle
      await db.addUser(userId, discountCode);

      await interaction.followUp({
        content: `Ä°ndirim kodun: **${discountCode.code}** ðŸŽ‰\nÄ°ndirim MiktarÄ±: **${discountCode.amountOff} TL** (%${Math.round((discountCode.amountOff / 2850) * 100)})\nSon Kullanma Tarihi: **${discountCode.expiresAt}**\nBu kodu Zero Pedal Makro CihazÄ± satÄ±n alÄ±rken kullanabilirsin!`,
        flags: MessageFlags.Ephemeral,
      });
    } catch (error) {
      console.error(`[${new Date().toLocaleString()}] Ä°ndirim kodu oluÅŸturulurken hata oluÅŸtu:`, error);
      await interaction.followUp({
        content: 'Ä°ndirim kodu oluÅŸturulurken bir hata oluÅŸtu. LÃ¼tfen tekrar dene.',
        flags: MessageFlags.Ephemeral,
      });
      // Hata durumunda kullanÄ±cÄ±yÄ± veritabanÄ±ndan Ã§Ä±kar (tekrar denemesine izin vermek iÃ§in)
      await db.removeUser(userId);
    }
  }
});

// Bot kapatÄ±ldÄ±ÄŸÄ±nda veritabanÄ±nÄ± kapat
process.on('SIGINT', async () => {
  try {
    await db.close();
    process.exit(0);
  } catch (err) {
    console.error('VeritabanÄ± kapatÄ±lÄ±rken hata oluÅŸtu:', err.message);
    process.exit(1);
  }
});

client.login(DC_TOKEN);

// HTTP Sunucusunu BaÅŸlat
const PORT = process.env.PORT || 3000;
app.get('/', (req, res) => {
  res.send('Bot Ã§alÄ±ÅŸÄ±yor!');
});

app.listen(PORT, () => {
  console.log(`[${new Date().toLocaleString()}] HTTP sunucusu ${PORT} portunda Ã§alÄ±ÅŸÄ±yor.`);
});