const { Client, GatewayIntentBits, ButtonBuilder, ButtonStyle, ActionRowBuilder, MessageFlags, PermissionFlagsBits } = require('discord.js');
const { DC_TOKEN } = require('./config.js');
const { createDiscountCode } = require('./shopier.js');
const express = require('express');
const app = express();

// KatÄ±lan kullanÄ±cÄ±larÄ± ve indirim kodlarÄ±nÄ± takip etmek iÃ§in bir Map oluÅŸtur
const participants = new Map(); // { userId: { code, amountOff, amountMinimum, expiresAt } }

// Tarih formatÄ±nÄ± gg/aa/yyyy formatÄ±na Ã§eviren fonksiyon
const formatDate = (dateString) => {
  // GeÃ§erli bir tarih string'i olup olmadÄ±ÄŸÄ±nÄ± kontrol et
  const date = new Date(dateString);
  if (isNaN(date.getTime())) {
    // GeÃ§ersiz tarih durumunda varsayÄ±lan bir tarih dÃ¶ndÃ¼r veya hata logla
    console.error(`[${new Date().toLocaleString()}] GeÃ§ersiz tarih formatÄ±: ${dateString}`);
    // VarsayÄ±lan olarak Ã§ekiliÅŸin son tarihini (10 MayÄ±s 2025) kullanabiliriz
    const defaultDate = new Date('2025-05-10T23:59:00+0300');
    const day = String(defaultDate.getDate()).padStart(2, '0');
    const month = String(defaultDate.getMonth() + 1).padStart(2, '0');
    const year = defaultDate.getFullYear();
    return `${day}/${month}/${year} 23:59`;
  }

  // GeÃ§erli tarih iÃ§in formatlama
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  return `${day}/${month}/${year} 23:59`;
};

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

client.on('ready', () => {
  console.log(`[${new Date().toLocaleString()}] Bot hazÄ±r! Bot ID: ${client.user.id}`);
});

client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  // !cekilis komutu
  if (message.content === '!cekilis') {
    console.log(`[${new Date().toLocaleString()}] KullanÄ±cÄ± ${message.author.tag} (${message.author.id}) !cekilis komutunu kullandÄ±.`);

    const button = new ButtonBuilder()
      .setCustomId('cekilis')
      .setLabel('ÅžansÄ±nÄ± Dene!')
      .setStyle(ButtonStyle.Primary);

    const row = new ActionRowBuilder().addComponents(button);

    await message.reply({
      content: 'AÅŸaÄŸÄ±daki butona basarak indirim kodunu Ã§ekebilirsin!',
      components: [row],
    });
  }

  // !temizle komutu (sadece adminler iÃ§in)
  if (message.content === '!temizle') {
    // KullanÄ±cÄ±nÄ±n admin yetkisine sahip olup olmadÄ±ÄŸÄ±nÄ± kontrol et
    if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {
      await message.reply({
        content: 'Bu komutu kullanmak iÃ§in yÃ¶netici yetkisine sahip olmalÄ±sÄ±n!',
        ephemeral: true,
      });
      return;
    }

    console.log(`[${new Date().toLocaleString()}] KullanÄ±cÄ± ${message.author.tag} (${message.author.id}) !temizle komutunu kullandÄ±.`);

    try {
      // KanalÄ±n tÃ¼m mesajlarÄ±nÄ± al ve sil
      let fetched;
      do {
        fetched = await message.channel.messages.fetch({ limit: 100 });
        if (fetched.size === 0) break;
        await message.channel.bulkDelete(fetched, true); // true: 14 gÃ¼nden eski mesajlarÄ± atla
        console.log(`[${new Date().toLocaleString()}] ${fetched.size} mesaj silindi.`);
      } while (fetched.size > 0);

      await message.reply({
        content: 'Kanal temizlendi! TÃ¼m mesajlar silindi.',
        ephemeral: true,
      });
    } catch (error) {
      console.error(`[${new Date().toLocaleString()}] Mesajlar silinirken hata oluÅŸtu:`, error);
      await message.reply({
        content: 'Mesajlar silinirken bir hata oluÅŸtu. LÃ¼tfen tekrar dene.',
        ephemeral: true,
      });
    }
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;

  if (interaction.customId === 'cekilis') {
    console.log(`[${new Date().toLocaleString()}] KullanÄ±cÄ± ${interaction.user.tag} (${interaction.user.id}) Ã§ekiliÅŸ butonuna bastÄ±.`);

    // KullanÄ±cÄ±nÄ±n daha Ã¶nce katÄ±lÄ±p katÄ±lmadÄ±ÄŸÄ±nÄ± kontrol et (Map'ten)
    const userId = interaction.user.id;
    const userExists = participants.has(userId);
    console.log(`[${new Date().toLocaleString()}] userExists kontrol sonucu:`, userExists);

    if (userExists) {
      const previousDiscount = participants.get(userId);
      const formattedDate = formatDate(previousDiscount.expiresAt);
      await interaction.reply({
        content: `Zaten Ã§ekiliÅŸe katÄ±ldÄ±n! Her kullanÄ±cÄ± yalnÄ±zca bir kez katÄ±labilir.\nÄ°ÅŸte daha Ã¶nce aldÄ±ÄŸÄ±n indirim kodu: **${previousDiscount.code}** ðŸŽ‰\nÄ°ndirim MiktarÄ±: **${previousDiscount.amountOff} TL** (%${Math.round((previousDiscount.amountOff / 2850) * 100)})\nSon Kullanma: **${formattedDate}**\nBu kodu Zero Pedal Makro CihazÄ± satÄ±n alÄ±rken kullanabilirsin!`,
        flags: MessageFlags.Ephemeral,
      });
      return; // KullanÄ±cÄ± zaten katÄ±ldÄ±ysa iÅŸlemi durdur
    }

    // KullanÄ±cÄ± daha Ã¶nce katÄ±lmadÄ±ysa, yeni bir indirim kodu oluÅŸtur
    await interaction.reply({
      content: 'Ã‡ekiliÅŸe katÄ±ldÄ±n! Ä°ndirim kodu oluÅŸturuluyor...',
      flags: MessageFlags.Ephemeral,
    });

    console.log(`[${new Date().toLocaleString()}] KullanÄ±cÄ± ${interaction.user.tag} (${interaction.user.id}) Ã§ekiliÅŸe eklendi.`);

    console.log(`[${new Date().toLocaleString()}] Ä°ndirim kodu oluÅŸturuluyor... KullanÄ±cÄ±: ${interaction.user.tag} (${interaction.user.id})`);

    try {
      const discountCode = await createDiscountCode();
      console.log(`[${new Date().toLocaleString()}] Kod: ${discountCode.code}, Ä°ndirim MiktarÄ±: ${discountCode.amountOff} TL (%${Math.round((discountCode.amountOff / 2850) * 100)}), Minimum Sepet: ${discountCode.amountMinimum} TL, Son Kullanma: ${discountCode.expiresAt}`);
      console.log(`[${new Date().toLocaleString()}] Ä°ndirim kodu baÅŸarÄ±yla oluÅŸturuldu! Shopier YanÄ±tÄ±:`, discountCode);

      // KullanÄ±cÄ±yÄ± ve indirim kodunu Map'e ekle
      participants.set(userId, {
        code: discountCode.code,
        amountOff: discountCode.amountOff,
        amountMinimum: discountCode.amountMinimum,
        expiresAt: discountCode.expiresAt,
      });

      const formattedDate = formatDate(discountCode.expiresAt);
      await interaction.followUp({
        content: `Ä°ndirim kodun: **${discountCode.code}** ðŸŽ‰\nÄ°ndirim MiktarÄ±: **${discountCode.amountOff} TL** (%${Math.round((discountCode.amountOff / 2850) * 100)})\nSon Kullanma: **${formattedDate}**\nBu kodu Zero Pedal Makro CihazÄ± satÄ±n alÄ±rken kullanabilirsin!`,
        flags: MessageFlags.Ephemeral,
      });
    } catch (error) {
      console.error(`[${new Date().toLocaleString()}] Ä°ndirim kodu oluÅŸturulurken hata oluÅŸtu:`, error);
      await interaction.followUp({
        content: 'Ä°ndirim kodu oluÅŸturulurken bir hata oluÅŸtu. LÃ¼tfen tekrar dene.',
        flags: MessageFlags.Ephemeral,
      });
      // Hata durumunda kullanÄ±cÄ±yÄ± Map'ten Ã§Ä±kar (tekrar denemesine izin vermek iÃ§in)
      participants.delete(userId);
    }
  }
});

client.login(DC_TOKEN);

// HTTP Sunucusunu BaÅŸlat
const PORT = process.env.PORT || 3000;
app.get('/', (req, res) => {
  res.send('Bot Ã§alÄ±ÅŸÄ±yor!');
});

app.listen(PORT, () => {
  console.log(`[${new Date().toLocaleString()}] HTTP sunucusu ${PORT} portunda Ã§alÄ±ÅŸÄ±yor.`);
});